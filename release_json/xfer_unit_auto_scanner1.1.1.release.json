{
  "slots": {
    "0": {
      "name": "XFR1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "OutputBin",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "InputBin1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "Screen",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "player",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "construct",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-4": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-5": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "--- unit.onStart()\nwss_software ={}\nwss_software.id = \"xfer_unit_auto_scanner\"\nwss_software.title = \"Transfer Unit Auto-Scanner / Auto-Balancer\"\nwss_software.version = \"1.1.1\"\nwss_software.revision = \"08 JAN 2023 02h15 AST\"\nwss_software.author = \"Michel Vaillancourt <902pe_gaming@wolfstar.ca>\"\n\nsystem.print(\"\\n --------------- \\n\")\nsystem.print(wss_software.title)\nsystem.print(wss_software.version)\n\n---\nprecisionDigits = 2\nprecisionValue  = 10^precisionDigits\ngramsToKG = 1000\nminutes = {}\nminutes[1] = 60\nminutes[2] = minutes[1]*2\nminutes[5] = minutes[1]*5\n\nstatusCodeTable = {}\nstatusCodeTable[1] = {state=\"Stopped\"}\nstatusCodeTable[2] = {state=\"Pending\"}\nstatusCodeTable[3] = {state=\"Jammed\"}\nstatusCodeTable[4] = {state=\"Storage Full\"}\nstatusCodeTable[5] = {state=\"No Output\"}\nstatusCodeTable[6] = {state=\"Running\"}\nstatusCodeTable[7] = {state=\"No Schemas\"}\n\n---\nmsgTag={}\nmsgTag[\"default\"] = wss_software.id\nmsgTag[\"inBin\"]  = \"_inputBinsContents\"\nmsgTag[\"outBin\"] = \"_outputBinContents\"\nmsgTag[\"screen\"] = \"_updateScreen\"\n\ntickTimeSeconds = 21\ncontainerVisibleGrid = 7 * 6\n\n--- test stuff is plugged in\nsystem.print(\"\\n --------------- \\n\")\nsystem.print(wss_software.id .. \":\".. XFR1.getClass() .. \":\" ..XFR1.getName())\nsystem.print(wss_software.id .. \":\".. InputBin1.getClass() .. \":\" ..InputBin1.getName() .. \":\"..roundDownToPrecision(InputBin1.getItemsVolume()) .. \"L Used\")\nsystem.print(wss_software.id .. \":\".. OutputBin.getClass() .. \":\" ..OutputBin.getName() .. \":\"..roundDownToPrecision(OutputBin.getItemsVolume()) .. \"L Used\")\n\noutputBinBigChunk = roundDownToPrecision(OutputBin.getMaxVolume()/containerVisibleGrid)\n\nsystem.print(wss_software.id .. \": Transfer Chunk Cap will be \"..outputBinBigChunk.. \"L\")\n\n---\nlocal lclFontName= \"Montserrat-Light\" --export\nFontName=[[\"]].. lclFontName ..[[\"]]\nFontSize= 20 --export\n\n---\ninputBinsContents = {}\noutputBinContents = {}\n\nScreen.activate()\n\nsystem.print(wss_software.id..\":\" .. OutputBin.getName() .. \":arming timer for first maximum first run delay in [\"..minutes[1]..\"] seconds\")\nunit.setTimer(wss_software.id, minutes[1]) \nunit.setTimer(msgTag[\"outBin\"],tickTimeSeconds)\nunit.setTimer(msgTag[\"screen\"],tickTimeSeconds)\n\n---eof---",
      "filter": {
        "args": [],
        "signature": "onStart()",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "local tagName = msgTag[\"default\"]\nunit.stopTimer(msgTag[\"default\"])\n\nsystem.print(OutputBin.getName()..\"-\"..tagName..\":timer fired\")\nloadTablesForBalancing()\ncheckBalancer()\nunit.setTimer(tagName, tickTimeSeconds)",
      "filter": {
        "args": [
          {
            "value": "xfer_unit_auto_scanner"
          }
        ],
        "signature": "onTimer(tag)",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "unit.stopTimer(msgTag[\"default\"])\nunit.stopTimer(msgTag[\"inBin\"])\nunit.stopTimer(msgTag[\"outBin\"])\nunit.stopTimer(msgTag[\"screen\"])\nXFR1.stop()\nScreen.setCenteredText(wss_software.title .. \" - \" .. wss_software.version)\nScreen.deactivate()",
      "filter": {
        "args": [],
        "signature": "onStop()",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "local tagName = msgTag[\"outBin\"]\nunit.stopTimer(msgTag[\"outBin\"])\nsystem.print(OutputBin.getName()..\"-\"..tagName..\":timer fired\")\n\nif balancerIsFree() then\n    local retrySeconds = OutputBin.updateContent()\n\n    if retrySeconds == 0 then\n        loadTablesForBalancing()\n        unit.setTimer(msgTag[\"inBin\"], tickTimeSeconds)\n    else\n        unit.setTimer(tagName, retrySeconds)\n    end\n\n    else\n    \n    unit.setTimer(tagName, minutes[2])\n    end\n\n\n",
      "filter": {
        "args": [
          {
            "value": "_outputBinContents"
          }
        ],
        "signature": "onTimer(tag)",
        "slotKey": "-1"
      },
      "key": "3"
    },
    {
      "code": "local tagName = msgTag[\"inBin\"]\nunit.stopTimer(msgTag[\"inBin\"])\nsystem.print(OutputBin.getName()..\"-\"..tagName..\":timer fired\")\n\nif balancerIsFree() then\n    local retrySeconds = InputBin1.updateContent()\n\n    if retrySeconds == 0 then\n        loadTablesForBalancing()\n        unit.setTimer(msgTag[\"outBin\"], tickTimeSeconds)\n    else\n        unit.setTimer(tagName, retrySeconds)\n    end\n    \n    else\n\n    unit.setTimer(tagName, minutes[2])\n    end",
      "filter": {
        "args": [
          {
            "value": "_inputBinsContents"
          }
        ],
        "signature": "onTimer(tag)",
        "slotKey": "-1"
      },
      "key": "4"
    },
    {
      "code": "local tagName = msgTag[\"screen\"]\nunit.stopTimer(tagName)\nsystem.print(OutputBin.getName()..\"-\"..tagName..\":timer fired\")\n\n---===\ntidyInBinContents = {}\n\nfor _,column in ipairs(inputBinsContents) do\n    local itemID   = column[1]\n    local quantity = column[3]\n    local item = system.getItem(itemID)\n    local item_data = { item.locDisplayNameWithSize, quantity}\n    table.insert(tidyInBinContents, item_data)\n    end\n\ncol_quantity=2\ntable.sort(tidyInBinContents, function(a, b) return a[col_quantity] > b[col_quantity] end)\n---===\n\nlocal json=require('dkjson')\nScreen.setScriptInput(json.encode(tidyInBinContents))\nrenderScreen()\n\nunit.setTimer(tagName,tickTimeSeconds)",
      "filter": {
        "args": [
          {
            "value": "_updateScreen"
          }
        ],
        "signature": "onTimer(tag)",
        "slotKey": "-1"
      },
      "key": "5"
    },
    {
      "code": "-- library.onStart()\n-- define key functions for use elsewhere\n---\nfunction roundUpToPrecision(valueToRound)\n     if valueToRound == nil then return 0 end\n     local roundedValue = (math.ceil(valueToRound * precisionValue) / precisionValue)\n  return roundedValue\n  end\n\n---\nfunction roundDownToPrecision(valueToRound)\n     if valueToRound == nil then return 0 end\n     local roundedValue = (math.floor(valueToRound * precisionValue) / precisionValue)\n  return roundedValue\n  end\n\n---\nfunction balancerIsBusy()\n    isBusy = false\n    if balancerStatus == 2\n        or balancerStatus == 6 then\n        isBusy = true\n        end\n    return isBusy\n    end\n\nfunction balancerIsFree()\n    return (balancerIsBusy() == false)\n    end\n\n---\nfunction checkBalancer()\n  system.print(OutputBin.getName() .. \":checkBalancer running\")\n\n  unit.stopTimer(wss_software.id)\n  balancerStatus = XFR1.getState()\n  system.print(OutputBin.getName() .. \":balancerStatus:\" .. balancerStatus)\n  if balancerIsBusy() then\n         system.print(OutputBin.getName() .. \":balancer busy on prior order\")\n         else\n         runBalancer()\n      end\n     unit.setTimer(wss_software.id, tickTimeSeconds)\n  end\n\n---\nfunction loadTablesForBalancing()\n\n  outBinItemList = OutputBin.getContent()\n  if #outBinItemList > 0 then\n    outputBinContents = {}\n\n      for _,column in ipairs(outBinItemList) do\n        local quantity = math.floor((column.quantity*100)/100)\n        local item = system.getItem(column.id)\n        local item_data = {\n            column.id,\n            item.locDisplayNameWithSize,\n            quantity,\n            item.iconPath\n        }\n        table.insert(outputBinContents, item_data)\n        end\n      end\n\n  inBinItemList = InputBin1.getContent()\n  if #inBinItemList > 0 then\n      inputBinsContents = {}\n      for _,column in ipairs(inBinItemList) do\n        local quantity = math.floor((column.quantity*100)/100)\n        local item = system.getItem(column.id)\n        local item_data = {\n            column.id,\n            item.locDisplayNameWithSize,\n            quantity,\n            item.iconPath\n        }\n        table.insert(inputBinsContents, item_data)\n       end\n      end\n\n  system.print(OutputBin.getName() .. \":loadTablesForBalancing: in/out: [\" .. #inputBinsContents .. \"/\" .. #outputBinContents .. \"]\")\n  end\n\n---\nfunction runBalancer()\n  system.print(\"\\n -------[\".. system.getArkTime() ..\"]------- \\n\")\n  system.print(wss_software.id .. \":runBalancer running\")\n  XFR1.stop()\n\n  if #inputBinsContents == 0\n        or #outputBinContents == 0\n        then return end\n\n  col_quantity=3\n  table.sort(inputBinsContents, function(a, b) return a[col_quantity] > b[col_quantity] end)\n\n  for row, column in ipairs(inputBinsContents) do --- 1\n    inputBinOreLitresAvailable = column[3]\n    outputBinOreLitresRequired = outputBinBigChunk\n    inputBinOreID = column[1]\n    inputBinOreName = column[2]\n    system.print(OutputBin.getName() .. \" ... Searching for \" .. inputBinOreName)\n    oreNotFoundInOutputBin = true\n\n    for row2, column2 in ipairs(outputBinContents) do\n      if column2[1] == inputBinOreID then\n        system.print(OutputBin.getName() .. \" ... FOUND \" .. inputBinOreName )\n        oreNotFoundInOutputBin = false\n        outputBinOreLitresAlreadyPresent = column2[3]\n        outputBinOreLitresRequired = outputBinBigChunk - outputBinOreLitresAlreadyPresent\n\n        system.print(OutputBin.getName() .. \" ... HAVE \" .. outputBinOreLitresAlreadyPresent .. \"L vs NEED \" .. outputBinOreLitresRequired .. \"L\")\n\n        if outputBinOreLitresRequired > inputBinOreLitresAvailable then outputBinOreLitresRequired = 0 end\n        if outputBinOreLitresAlreadyPresent > inputBinOreLitresAvailable then outputBinOreLitresRequired = 0 end\n      end\n    end\n\n    if oreNotFoundInOutputBin then\n        system.print(OutputBin.getName() .. \" ... 404-\" .. inputBinOreName)\n        outputBinOreLitresRequired = outputBinBigChunk\n        if outputBinOreLitresRequired > inputBinOreLitresAvailable then outputBinOreLitresRequired = roundUpToPrecision(inputBinOreLitresAvailable / 2) end\n        end\n\n    if outputBinOreLitresRequired > 0 then\n      XFR1.setOutput(inputBinOreID)\n      XFR1.startFor(1)\n      system.print(OutputBin.getName() .. \" ... xfer started of \" .. column[2] .. \" for total of \" .. outputBinOreLitresRequired .. \"L\")\n      return\n      end\n    end --- 1\n\n    return\n  end\n---\n\nfunction renderScreen()\n\n  local ScreenTable={}\n  --Parameters (1)\n   ScreenTable[1]=[[\n   local FontName=]] .. FontName ..[[\n   local FontSize=]] .. FontSize ..[[\n   local S_Title=\"]] .. wss_software.title ..[[\"\n   local S_Version=\"]] .. wss_software.version ..[[\"\n   local S_Revision=\"]] .. wss_software.revision ..[[\"\n   local timeStamp=\"]] .. system.getArkTime() ..[[\" \n   local xfer_l_name=\"]] ..OutputBin.getName() .. [[\"\n   ]]\n\n   -- general layout(2)\n   ScreenTable[2]=[[\n   --Layers\n   local layers={}\n   layers[\"background\"]  = createLayer()\n   layers[\"shading\"]     = createLayer()\n   layers[\"report_text\"] = createLayer()\n   layers[\"footer_text\"] = createLayer()\n   layers[\"header_text\"] = createLayer()\n\n   --util functions\n    function tidy(valueToRound)\n        precisionDigits = 2\n        precisionValue  = 10^precisionDigits\n        if valueToRound == nil then return 0 end\n        local roundedValue = (math.floor(valueToRound * precisionValue) / precisionValue)\n        return roundedValue\n        end\n    \n    \n   --Scr Resolution\n    local rx, ry=getResolution()\n    local layout = {}\n    layout.cols_wide = tidy(rx/(FontSize*1.2))\n    layout.col_width = tidy(rx/layout.cols_wide)\n    \n    layout.rows_high = tidy(ry/(FontSize*1.2))\n    layout.row_height = tidy(ry/layout.rows_high)\n    \n    layout.margin_top = tidy((ry * 0.1) / 2)\n    layout.margin_bottom = layout.margin_top\n    layout.margin_left = tidy((rx * 0.1) / 2)\n    layout.margin_right = layout.margin_left\n\n    local FontText=loadFont(FontName , FontSize)\n\n    function getRowColsPosition(layout, col, row)\n      if col > layout.cols_wide then col = layout.cols_wide end\n      x_pos = (layout.col_width * col) + layout.margin_left\n\n      if row > layout.rows_high then row = layout.rows_high end\n      y_pos = (layout.row_height * row) + layout.margin_top\n\n      return {x_pos = x_pos, y_pos = y_pos}\n      end ]]\n\n    --get data to publish (3)\n    ScreenTable[3]=[[\n    local json=require('dkjson')\n    local input=json.decode(getInput()) or {}\n    local tidyInBinContents=input\t\n    \n    ]]    \n    \n    -- demo data(4)\n    ScreenTable[4]=[[\n    local vpos = 1\n    publish_to = getRowColsPosition(layout, 1, vpos)\n    textMessage = S_Title .. \" v\" .. S_Version .. \" (\" .. S_Revision .. \")\"\n    addText(layers[\"header_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)\n    \n    publish_to = getRowColsPosition(layout, 1, vpos+1)\n    textMessage = \"There are \" .. #tidyInBinContents .. \" Rows of data to publish.\"\n    addText(layers[\"header_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)\n\n    col = tidy(layout.cols_wide/3)\n    row = layout.rows_high - 3\n    \n    publish_to = getRowColsPosition(layout, col, row)\n    textMessage = \"screen last updated: [\"..timeStamp..\"]\"\n    addText(layers[\"footer_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos) ]]\n\n    --- now do some clever screen output here (5)\n    ScreenTable[5]=[[\n        screen_offset = 2\n        index_offset  = 1\n        vpos = tidy((layout.rows_high - #tidyInBinContents - screen_offset - index_offset)/2)\n        for ptr=1,#tidyInBinContents do\n            local item = tidyInBinContents[ptr][1]\n            local quantity = tidyInBinContents[ptr][2]\n\n            local row = vpos + ptr\n            local col = 2\n            publish_to = getRowColsPosition(layout, col, row)\n            textMessage = item .. \":\"\n            addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos, publish_to.y_pos)    \n\n            offset = 15 * FontSize\n            textMessage = quantity\n            addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos + offset, publish_to.y_pos)    \n            end\n     \n        offset = 20 * FontSize\n        textMessage = \"Connected to: \" .. xfer_l_name\n        local row = vpos + 1\n        local col = 2\n        publish_to = getRowColsPosition(layout, col, row)\n        addText(layers[\"report_text\"], FontText, textMessage, publish_to.x_pos + offset, publish_to.y_pos)    \n    \n     ]]\n\n     --Animation (7)\n   ScreenTable[7]=[[\n   requestAnimationFrame(5)]]\n\n  --RENDER\n   function ScreenRender()\n    local screenTemplate=table.concat(ScreenTable)\n\n    Screen.setRenderScript(screenTemplate)\n   end\n   ScreenRender()\n  end\n---\n--- eof ---",
      "filter": {
        "args": [],
        "signature": "onStart()",
        "slotKey": "-5"
      },
      "key": "6"
    }
  ],
  "methods": [],
  "events": []
}